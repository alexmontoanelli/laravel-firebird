<?php

namespace Firebird;

use PDO;
use Firebird\Query\Grammars\Firebird25Grammar as QueryGrammar;
use Firebird\Query\Grammars\Firebird30Grammar as QueryGrammar30;
use Firebird\Query\Builder as QueryBuilder;
use Firebird\Schema\Grammars\FirebirdGrammar as SchemaGrammar;
use Firebird\Schema\Builder as SchemaBuilder;
use Firebird\Query\Processors\FirebirdProcessor as Processor;

class Connection extends \Illuminate\Database\Connection
{
    private $engine_version = null;

    protected function getEngineVersion()
    {
        if (!$this->engine_version) {
            $this->engine_version = isset($this->config['engine_version']) ? $this->config['engine_version'] : null;
        }

        if (!$this->engine_version) {
            $sql = "SELECT RDB\$GET_CONTEXT(?, ?) FROM RDB\$DATABASE";
            $sth = $this->getPdo()->prepare($sql);
            $sth->execute(['SYSTEM', 'ENGINE_VERSION']);
            $this->engine_version = $sth->fetchColumn();
            $sth->closeCursor();
        }

        return $this->engine_version;
    }

    protected function getMajorEngineVersion()
    {
        $version = $this->getEngineVersion();

        $parts = explode('.', $version);

        return (int) $parts[0];
    }

    protected function getDefaultQueryGrammar()
    {
        //return parent::getDefaultQueryGrammar(); // TODO: Change the autogenerated stub

        if ($this->getMajorEngineVersion() >= 3) {
            return new QueryGrammar30;
        }

        return new QueryGrammar;
    }

    protected function getDefaultPostProcessor()
    {
        //return parent::getDefaultPostProcessor(); // TODO: Change the autogenerated stub

        return new Processor;
    }

    public function getSchemaBuilder()
    {
        //return parent::getSchemaBuilder(); // TODO: Change the autogenerated stub

        if (is_null($this->schemaGrammar)) {
            $this->useDefaultSchemaGrammar();
        }

        return new SchemaBuilder($this);
    }

    protected function getDefaultSchemaGrammar()
    {
        //parent::getDefaultSchemaGrammar(); // TODO: Change the autogenerated stub

        return $this->withTablePrefix(new SchemaGrammar);
    }

    protected function getQueryBuilder()
    {
        $processor = $this->getPostProcessor();
        $grammar = $this->getQueryGrammar();

        return new QueryBuilder($this, $grammar, $processor);
    }

    public function query()
    {
        //return parent::query(); // TODO: Change the autogenerated stub

        return $this->getQueryBuilder();
    }

    public function executeFunction($function, array $values = null)
    {
        $query = $this->getQueryBuilder();

        return $query->executeFunction($function, $values);
    }

    public function executeProcedure($procedure, array $values = null)
    {
        $query = $this->getQueryBuilder();

        return $query->executeProcedure($procedure, $values);
    }

    public function beginTransaction()
    {
        if ($this->transactions == 0 && $this->pdo->getAttribute(PDO::ATTR_AUTOCOMMIT) == 1) {
            $this->pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 0);
        }

        parent::beginTransaction();
    }

    public function commit()
    {
        parent::commit();

        if ($this->transactions == 0 && $this->pdo->getAttribute(PDO::ATTR_AUTOCOMMIT) == 0) {
            $this->pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 1);
        }
    }

    public function rollBack($toLevel = null)
    {
        parent::rollBack($toLevel);
        if ($this->transactions == 0 && $this->pdo->getAttribute(PDO::ATTR_AUTOCOMMIT) == 0) {
            $this->pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 1);
        }
    }

}