<?php

namespace Firebird\Schema;

use Illuminate\Database\Schema\Builder as BaseBuilder;
use Firebird\Schema\Blueprint;
use Firebird\Schema\SequenceBlueprint;
use Closure;


class Builder extends BaseBuilder
{
    protected function createBlueprint($table, Closure $callback = null)
    {
        //return parent::createBlueprint($table, $callback); // TODO: Change the autogenerated stub

        if (isset($this->resolver)) {
            return call_user_func($this->resolver, $table, $callback);
        }

        return new Blueprint($table, $callback);
    }

    protected function createSequenceBlueprint($sequence, Closure $callback = null)
    {
        if (isset($this->resolver)) {
            return call_user_func($this->resolver, $sequence, $callback);
        }

        return new SequenceBlueprint($sequence, $callback);
    }

    protected function buildSequence(SequenceBlueprint $seqprint)
    {
        $seqprint->build($this->connection, $this->grammar);
    }

    public function hasSequence($sequence)
    {
        $sql = $this->grammar->compileSequenceExists();

        return count($this->connection->select($sql, [$sequence])) > 0;
    }

    public function createSequence($sequence, Closure $callback = null)
    {
        $seqprint = $this->createSequenceBlueprint($sequence);

        $seqprint->create();

        if ($callback) {
            $callback($seqprint);
        }

        $this->buildSequence($seqprint);
    }

    public function dropSequence($sequence)
    {
        $seqprint = $this->createSequenceBlueprint($sequence);

        $seqprint->drop();

        $this->buildSequence($seqprint);
    }

    public function sequence($sequence, Closure $callback)
    {
        $this->buildSequence($this->createSequenceBlueprint($sequence, $callback));
    }

    public function dropSequenceIfExists($sequence)
    {
        $blueprint = $this->createSequenceBlueprint($sequence);

        $blueprint->dropIfExists();

        $this->buildSequence($blueprint);
    }

}